name: Linting

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  pull-requests: write
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "24"
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --no-audit --fund=false

      - name: Check formatting
        id: prettier
        continue-on-error: true
        run: |
          mkdir -p reports
          npm run format:check || true
          npx prettier --list-different . > reports/prettier.txt

      - name: Lint
        id: lint
        continue-on-error: true
        run: npm run lint:sarif

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: reports/eslint.sarif
          category: eslint

      - name: Build summary table
        id: build_summary
        if: always()
        run: |
          if [ -s reports/eslint.sarif ]; then
            ERRORS=$(jq '[.. | objects | select(.ruleId?) | select(.level=="error")] | length' "reports/eslint.sarif")
            WARNINGS=$(jq '[.. | objects | select(.ruleId?) | select(.level=="warning")] | length' "reports/eslint.sarif")
          else
            ERRORS="REPORT UNAVAILABLE"
            WARNINGS="REPORT UNAVAILABLE"
          fi

          if [ -s reports/prettier.txt ]; then
            FMT_STATUS="NOT OK"
          else
            FMT_STATUS="OK"
          fi

          TABLE=$(jq -r '
              .runs[].results[]
              | { level, ruleId, message: .message.text,
                  uri: (
                    .locations[0].physicalLocation.artifactLocation.uri
                    | sub("^file://"; "")
                    | sub("'$PWD'/"; "")
                  ),
                  line: (.locations[0].physicalLocation.region.startLine // 0),
                  col:  (.locations[0].physicalLocation.region.startColumn // 0) }
              | "| \(.level) |  \((.message // "") | gsub("\\n"; " ") | gsub("\\|"; "\\\\|")) | \(.uri):\(.line):\(.col) | \(.ruleId // "-") |"
            ' reports/eslint.sarif \
            | head -n 200)
            
          PRETTIER_FILES=""
          if [ -s reports/prettier.txt ]; then
            PRETTIER_FILES="$(printf '```\n%s\n```\n' "$(cat reports/prettier.txt)")"
          fi


          {
            echo "### Lint & Format Summary"
            echo
            echo "- Formatting: **$FMT_STATUS**"
            echo "- Errors: **$ERRORS**"
            echo "- Warnings: **$WARNINGS**"
            echo
            if [ -n "$PRETTIER_FILES" ]; then
              echo "#### Files needing formatting "
              echo
              echo "${PRETTIER_FILES}"
            fi
            if [ -n "$TABLE" ]; then
              echo "#### ESLint errors and warnings."
              echo
              echo "| Level | Message | Location | Rule |"
              echo "|-------|---------|----------|------|"
              echo "$TABLE"
              echo
              echo "_(showing up tp 200 findings)_"
            fi
          } > reports/summary.md

          {
            echo "summary<<EOF"
            cat reports/summary.md
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          cat reports/summary.md >> "$GITHUB_STEP_SUMMARY"

      - name: Build PR comment
        id: build_comment
        if: ${{ always() && github.event_name == 'pull_request' }}
        run: |
          JOB_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          CODESCAN_URL="https://github.com/${{ github.repository }}/security/code-scanning?query=pr%3A${{ github.event.pull_request.number }}+is%3Aopen"

          if [ "${{ steps.prettier.outcome }}" = "failure" ] || [ "${{ steps.lint.outcome }}" = "failure" ]; then
            STATUS_EMOJI="❌"
            STATUS_TEXT="Failed"
          else
            STATUS_EMOJI="✅"
            STATUS_TEXT="Passed"
          fi

          {
          echo "**Lint & Format Status:** $STATUS_EMOJI $STATUS_TEXT"
          echo
          echo "[View full run]($JOB_URL) | [Code scanning results]($CODESCAN_URL)"
          echo
          if [ "$STATUS_TEXT" = "Failed" ]; then
          echo '<details>'
          echo '<summary>Click to expand linting and formatting details</summary>'
          echo
          echo "${{ steps.build_summary.outputs.summary }}"
          echo
          echo '</details>'
          fi
          } > reports/comment.md

          {
          echo "comment<<EOF"
          cat reports/comment.md
          echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Comment PR
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: mshick/add-pr-comment@v2
        with:
          message-id: lint-summary-${{ github.event.pull_request.number }}
          message: ${{ steps.build_comment.outputs.comment }}

      - name: Fail if issues found
        if: always()
        run: |
          FAIL=0
          if [ "${{ steps.prettier.outcome }}" = "failure" ]; then
            echo "Formatting issues found."
            FAIL=1
          fi

          if [ "${{ steps.lint.outcome }}" = "failure" ]; then
           echo "Linting issues found."
           FAIL=1
          fi
          exit $FAIL
